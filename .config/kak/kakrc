colorscheme gruvbox

# Use ag for grepping
set global grepcmd 'ag'
set global termcmd 'nk '


evaluate-commands %sh{
    case $(uname) in
        Linux) copy="xclip -i"; paste="xclip -o" ;;
        Darwin)  copy="pbcopy"; paste="pbpaste" ;;
    esac

    printf "map global user -docstring 'paste (after) from clipboard' p '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (before) from clipboard' P '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'yank to clipboard' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
}

## USER MODE BINDINGS
# File bindings
map global user 0 ': e ~/notes/notes.md<ret>' -docstring 'Open notes'
map global user 1 ': e ~/.config/kak/kakrc<ret>' -docstring 'Open kakrc'
# Command bindings
map global user f ': fzf-mode<ret>' -docstring 'Search files'
map global user a ': grep ' -docstring 'Grep for file contents'
map global user w ': new<ret>' -docstring 'Open a new window'
# map global user u ': terminal %sh{echo $SHELL}<ret>' -docstring 'Run new terminal'
map global user t ': terminal %val{client_env_SHELL} -c "cd %sh{echo $(dirname $kak_buffile)} ; %val{client_env_SHELL}"<ret>' -docstring 'Run terminal in current buffer directory'
map global user c ': comment-line<ret>' -docstring 'Comment line'
map global user l ': enter-user-mode lsp<ret>' -docstring 'Enter LSP user mode'

# space is my leader
map global normal <space> , -docstring 'leader'
map global normal <backspace> <space> -docstring 'remove all sels except main'
map global normal <a-backspace> <a-space> -docstring 'remove main sel'

# Plug variables
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/fzf.kak"
plug "ul/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force
}

# enable kak-lsp
lsp-enable

# Fuzzy search everything through fzf!
define-command -hidden fzf-ag %{ evaluate-commands %sh{
    cmd="ag --nobreak --noheading ."
    additional_flags="--delimiter=:  --nth=3.. | cut -d ':' -f1,2 | tr ':' ' '"
    printf "%s\n" "fzf %{edit} %{$cmd} %{-m --expect ctrl-w $additional_flags}"
}}
map global fzf -docstring "ag files" 'a' '<esc>: fzf-ag<ret>'

define-command -hidden fzf-gitgrep %{ evaluate-commands %sh{
    cmd="git grep ."
    additional_flags="--delimiter=:  --nth=3.. | cut -d ':' -f1,2 | tr ':' ' '"
    printf "%s\n" "fzf %{edit} %{$cmd} %{-m --expect ctrl-w $additional_flags}"
}}
map global fzf -docstring "ag files" 'a' '<esc>: fzf-ag<ret>'
map global fzf -docstring "git-grep files" 'g' '<esc>: fzf-gitgrep<ret>'
set-option global fzf_preview false
set-option global fzf_file_command 'ag -l -f --one-device --silent .'

add-highlighter global/ number-lines
hook global InsertChar \t %{ exec -draft -itersel h@ }
set global tabstop 4
set global indentwidth 4
