#############################################################################
## Plug
#############################################################################

# Plug variables
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "ul/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path .
}
plug "occivink/kakoune-gdb"
plug "eraserhd/kak-ansi"

# enable kak-lsp
hook global WinSetOption filetype=(c|cpp) %{
        lsp-enable-window
}

#############################################################################
## Functions
#############################################################################
evaluate-commands %sh{
    case $(uname) in
        Linux) copy="xclip -i -selection clipboard"; paste="xclip -o -selection clipboard" ;;
        Darwin)  copy="pbcopy"; paste="pbpaste" ;;
    esac

    printf "map global user -docstring 'paste (after) from clipboard' p '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (before) from clipboard' P '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'yank to clipboard' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
}

# GDB Mode
declare-user-mode gdb

map global user g ':enter-user-mode<space>gdb<ret>'

map global gdb i ': gdb-session-connect<ret>' -docstring 'Initialize'
map global gdb c ': gdb-continue<ret>' -docstring 'Continue'
map global gdb n ': gdb-next<ret>' -docstring 'Next'
map global gdb s ': gdb-step<ret>' -docstring 'Step'
map global gdb p ': gdb-print ' -docstring 'Print'
map global gdb b ': gdb-toggle-breakpoint<ret>' -docstring 'Toggle breakpoint'
map global gdb a ': gdb-toggle-autojump<ret>' -docstring 'Print'

alias global terminal x11-terminal
alias global focus x11-focus
alias global repl x11-repl
alias global send-text x11-send-text


# User mode
declare-user-mode win

map global user w ':enter-user-mode<space>win<ret>'

map global win w ': x11-terminal kak -c %val{session}<ret>' -docstring 'Open a new window'
map global win t ': x11-terminal %sh{echo $SHELL}<ret>' -docstring 'Run new terminal'
map global win g ': x11-terminal shell-run source git-root-go<ret>' -docstring 'New terminal in git root'
map global win b ': x11-terminal shell-run source git-root-go-build<ret>' -docstring 'New terminal in git root build dir'

declare-option -hidden str termcmd_pop "kitty --class drop_kitty_terminal --single-instance --wait-for-single-instance-window-close sh -c"

define-command file-search %{ nop %sh{ {
    mkfifo /tmp/fff_fifo
    ag -l -f --one-device --silent . > /tmp/fff_fifo &
    $kak_opt_termcmd_pop "fzf < /tmp/fff_fifo > /tmp/fff_result.out"
    file_open=$(cat /tmp/fff_result.out)
    echo "eval -client '$kak_client' 'e ${file_open}'" |
        kak -p ${kak_session}
} > /dev/null 2>&1 < /dev/null & }}

define-command ag-search %{ nop %sh{ {
    mkfifo /tmp/fff_fifo
    ag --nobreak --noheading . > /tmp/fff_fifo &
    $kak_opt_termcmd_pop "fzf --delimiter=: --nth=3.. < /tmp/fff_fifo > /tmp/fff_result.out"
    file_open=$(cat /tmp/fff_result.out | cut -d ':' -f1,2 | tr ':' ' ')
    echo "eval -client '$kak_client' 'e ${file_open}'" |
        kak -p ${kak_session}
} > /dev/null 2>&1 < /dev/null & }}

define-command selection-search %{ nop %sh{ {
    mkfifo /tmp/fff_fifo
    ag --nobreak --noheading . > /tmp/fff_fifo &
    $kak_opt_termcmd_pop "fzf --query=$kak_selections --delimiter=: --nth=3.. < /tmp/fff_fifo > /tmp/fff_result.out"
    file_open=$(cat /tmp/fff_result.out | cut -d ':' -f1,2 | tr ':' ' ')
    echo "eval -client '$kak_client' 'e ${file_open}'" |
        kak -p ${kak_session}
} > /dev/null 2>&1 < /dev/null & }}

define-command buf-search %{ nop %sh{ {
    $kak_opt_termcmd_pop "echo $kak_buflist | tr ' ' '\n' | fzf --delimiter=' ' > /tmp/fff_result.out"
    file_open=$(cat /tmp/fff_result.out)
    echo "eval -client '$kak_client' 'b ${file_open}'" |
        kak -p ${kak_session}
} > /dev/null 2>&1 < /dev/null & }}

define-command ranger-search %{ nop %sh{ {
    $kak_opt_termcmd_pop "ranger --choosefile=/tmp/rng_choice"
    file_open=$(cat /tmp/rng_choice)
    echo "eval -client '$kak_client' 'e ${file_open}'" |
        kak -p ${kak_session}
} > /dev/null 2>&1 < /dev/null & }}

# Only for debugging purposes
define-command sleep %{ nop %sh{ {
    sleep 10
    echo "eval -client '$kak_client' 'echo sleep ended'" |
        kak -p ${kak_session}
} > /dev/null 2>&1 < /dev/null & }}


#############################################################################
## USER MODE BINDINGS
#############################################################################
colorscheme gruvbox

# File bindings
map global user 0 ': e ~/notes/notes.md<ret>' -docstring 'Open notes'
map global user 1 ': e ~/.config/kak/kakrc<ret>' -docstring 'Open kakrc'
# Command bindings
map global user f ': file-search<ret>' -docstring 'Search files'
map global user a ': ag-search<ret>' -docstring 'Grep for file contents'
map global user s ': selection-search<ret>' -docstring 'Grep for selection'
map global user r ': ranger-search<ret>' -docstring 'Find file using ranger'
map global user c ': comment-line<ret>' -docstring 'Comment line'
map global user l ': enter-user-mode lsp<ret>' -docstring 'Enter LSP user mode'

# space is my leader
map global normal <space> , -docstring 'leader'
map global normal <backspace> <space> -docstring 'remove all sels except main'
map global normal <a-backspace> <a-space> -docstring 'remove main sel'

map -docstring 'case insensitive search' global user '/' /(?i)
map -docstring 'case insensitive backward search' global user '<a-/>' <a-/>(?i)
map -docstring 'case insensitive extend search' global user '?' ?(?i)
map -docstring 'case insensitive backward extend-search' global user '<a-?>' <a-?>(?i)

# Use ag for grepping
set global grepcmd 'ag'

# line numbers
add-highlighter global/ number-lines

hook global BufCreate .*\.launch %{
    set-option buffer filetype xml
}
hook global InsertChar \t %{ try %{
  execute-keys -draft "h<a-h><a-k>\A\h+\z<ret><a-;>;%opt{indentwidth}@"
}}
hook global InsertDelete ' ' %{ try %{
  execute-keys -draft 'h<a-h><a-k>\A\h+\z<ret>i<space><esc><lt>'
}}

set global tabstop 4
set global indentwidth 4

