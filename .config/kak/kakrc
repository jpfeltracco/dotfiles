#############################################################################
## Plug
#############################################################################

# Plug variables
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "jpfeltracco/fzf.kak"
plug "ul/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force
}
plug "occivink/kakoune-gdb"

# enable kak-lsp
lsp-enable

#############################################################################
## Functions
#############################################################################

evaluate-commands %sh{
    case $(uname) in
        Linux) copy="xclip -i -selection clipboard"; paste="xclip -o -selection clipboard" ;;
        Darwin)  copy="pbcopy"; paste="pbpaste" ;;
    esac

    printf "map global user -docstring 'paste (after) from clipboard' p '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (before) from clipboard' P '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'yank to clipboard' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
}

set-option global termcmd "kitty @ new-window --no-response "

# GDB Mode
declare-user-mode gdb

map global user g ':enter-user-mode<space>gdb<ret>'

map global gdb i ': gdb-session-connect<ret>' -docstring 'Initialize'
map global gdb c ': gdb-continue<ret>' -docstring 'Continue'
map global gdb n ': gdb-next<ret>' -docstring 'Next'
map global gdb s ': gdb-step<ret>' -docstring 'Step'
map global gdb p ': gdb-print ' -docstring 'Print'
map global gdb b ': gdb-toggle-breakpoint<ret>' -docstring 'Toggle breakpoint'
map global gdb a ': gdb-toggle-autojump<ret>' -docstring 'Print'

# User mode
declare-user-mode win

map global user w ':enter-user-mode<space>win<ret>'

map global win w ': terminal kak -c %val{session}<ret>' -docstring 'Open a new window'
map global win t ': terminal %sh{echo $SHELL}<ret>' -docstring 'Run new terminal'
map global win g ': terminal shell-run source git-root-go<ret>' -docstring 'New terminal in git root'
map global win b ': terminal shell-run source git-root-go-build<ret>' -docstring 'New terminal in git root build dir'
# map global win t ': terminal %val{client_env_SHELL} -c "cd %sh{echo $(dirname $kak_buffile)} ; %val{client_env_SHELL}"<ret>' -docstring 'Run terminal in current buffer directory'

# User mode for searching file contents
declare-user-mode ag

# Ag with basically no restrictions
define-command -hidden fzf-ag %{ evaluate-commands %sh{
    cmd="ag --nobreak --noheading ."
    additional_flags="--delimiter=:  --nth=3.. | cut -d ':' -f1,2 | tr ':' ' '"
    printf "%s\n" "fzf %{edit} %{$cmd} %{-m --expect ctrl-w $additional_flags}"
}}
map global ag -docstring "ag files" 'a' '<esc>: fzf-ag<ret>'

# Ag only on non-submodules (useful in repos with submodule dependencies)
define-command -hidden fzf-ag-nosub %{ evaluate-commands %sh{
    cmd="ag-nosub --nobreak --noheading ."
    additional_flags="--delimiter=:  --nth=3.. | cut -d ':' -f1,2 | tr ':' ' '"
    printf "%s\n" "fzf %{edit} %{$cmd} %{-m --expect ctrl-w $additional_flags}"
}}
map global ag -docstring "ag files" 's' '<esc>: fzf-ag-nosub<ret>'

# Git grep files
define-command -hidden fzf-gitgrep %{ evaluate-commands %sh{
    cmd="git grep -n ."
    additional_flags="--delimiter=:  --nth=3.. | cut -d ':' -f1,2 | tr ':' ' '"
    printf "%s\n" "fzf %{edit} %{$cmd} %{-m --expect ctrl-w $additional_flags}"
}}
map global ag -docstring "git-grep files" 'g' '<esc>: fzf-gitgrep<ret>'

set-option global fzf_preview false
set-option global fzf_file_command 'ag -l -f --one-device --silent .'

hook global BufCreate .*\.launch %{
    set-option buffer filetype xml
}

#############################################################################
## USER MODE BINDINGS
#############################################################################

colorscheme gruvbox

# File bindings
map global user 0 ': e ~/notes/notes.md<ret>' -docstring 'Open notes'
map global user 1 ': e ~/.config/kak/kakrc<ret>' -docstring 'Open kakrc'
# Command bindings
map global user f ': fzf-mode<ret>' -docstring 'Search files'
# map global user a ': grep ' -docstring 'Grep for file contents'
map global user c ': comment-line<ret>' -docstring 'Comment line'
map global user l ': enter-user-mode lsp<ret>' -docstring 'Enter LSP user mode'

# space is my leader
map global normal <space> , -docstring 'leader'
map global normal <backspace> <space> -docstring 'remove all sels except main'
map global normal <a-backspace> <a-space> -docstring 'remove main sel'

map -docstring 'case insensitive search' global user '/' /(?i)
map -docstring 'case insensitive backward search' global user '<a-/>' <a-/>(?i)
map -docstring 'case insensitive extend search' global user '?' ?(?i)
map -docstring 'case insensitive backward extend-search' global user '<a-?>' <a-?>(?i)

map global user a ':enter-user-mode<space>ag<ret>'

# Use ag for grepping
set global grepcmd 'ag'

# line numbers
add-highlighter global/ number-lines

# tab stop
# hook global InsertChar \t %{ exec -draft -itersel h@ }

hook global InsertChar \t %{ try %{
  execute-keys -draft "h<a-h><a-k>\A\h+\z<ret><a-;>;%opt{indentwidth}@"
}}
hook global InsertDelete ' ' %{ try %{
  execute-keys -draft 'h<a-h><a-k>\A\h+\z<ret>i<space><esc><lt>'
}}

set global tabstop 4
set global indentwidth 4

