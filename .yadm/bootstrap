#!/usr/bin/env python3

import os
import sys
from subprocess import check_call
from subprocess import CalledProcessError

#################################
##### Helper Functions
#################################

def print_cmd(cmd):
    if not isinstance(cmd, str):
        cmd = " ".join(cmd)
    print("RUN: `{}`".format(cmd))

def print_section(sec):
    print("SECTION: `{}`".format(sec))

def print_info(info):
    print("INFO: `{}`".format(info))

def run(cmd, *args, **kwargs):
    print_cmd(cmd)
    check_call(cmd, *args, **kwargs)

def pkg_check_installed(pkg):
    cmd = "dpkg -l {}".format(pkg)
    success = True
    try:
        run(cmd.split())
    except CalledProcessError as e:
        print("Package {} not found, error: {}".format(pkg, e))
        success = False

    return success

def apt_get_update():
    cmd = "sudo apt-get update"
    run(cmd.split())

def apt_add_repo(repo):
    cmd = "sudo apt-add-repository -y {}".format(repo)
    run(cmd.split())

def apt_get_pkgs(pkg_list):
    cmd = "sudo apt-get install -y {}".format(" ".join(pkg_list))
    run(cmd.split())

def brew_install_pkgs(pkg_str):
    cmd = "brew install {}".format(pkg_str)
    run(cmd.split())

def git_clone(url, flags=None, dest=None):
    command_list = ["git", "clone", url]
    if flags is not None:
        command_list.append(flags)
    if dest is not None:
        command_list.append(dest)
    run(command_list)

def add_to_shell_config(line):
    for config in ["~/.bashrc", "~/.zshrc"]:
        config_path = os.path.expanduser(config)
        if os.path.isfile(config_path):
            print("Appending line {} to file {}".format(line, config_path))
            with open(config_path, "a") as config_file:
                config_file.write(line)

def yadm_clone():
    if not os.path.isdir(os.path.expanduser("~/.yadm")):
        dotfiles_repo = "https://github.com/jpfeltracco/dotfiles"
        cmd = ["yadm", "clone", dotfiles_repo]
        run(cmd)
    else:
        print_info("Yadm already cloned")

    git_submodule_update = "yadm submodule update --init --recursive"

    try:
        run(git_submodule_update.split())
    except CalledProcessError as e:
        print("submodule update returned error code, but this is a git bug I believe, error: {}"
              .format(e))
    

    git_config_name = "git config user.name \"Jeremy Feltracco\""
    email = "jpfeltracco@gmail.com"

    if query_yes_no("Set custom email? Current is: {}".format(email)):
        email = input("New email: ")

    git_config_email = "git config user.email \"{}\"".format(email)

    run(git_config_name.split(), cwd=os.path.expanduser("~/.yadm/repo.git"))
    run(git_config_email.split(), cwd=os.path.expanduser("~/.yadm/repo.git"))

def shell_setup():
    change_shell_cmd = "chsh -s /usr/bin/fish"
    run(change_shell_cmd.split())

def install_kitty():
    # I don't like running random bash scripts, but hopefully this one is kosher
    cmd = "curl -L https://sw.kovidgoyal.net/kitty/installer.sh -o /tmp/installer.sh"
    run(cmd.split())
    run("sh /tmp/installer.sh".split(), cwd=os.path.expanduser("~"))

    cmds = []
    cmds.append("mkdir -p ~/.local/bin")
    cmds.append("ln -s ~/.local/kitty.app/bin/kitty ~/.local/bin/")
    cmds.append("cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications")
    cmds.append("sed -i \"s/Icon\=kitty/Icon\=\/home\/$USER\/.local\/kitty.app\/share\/icons\/hicolor\/256x256\/apps\/kitty.png/g\" ~/.local/share/applications/kitty.desktop")

    for cmd in cmds:
        # run("bash -c '{}'".format(cmd), shell=True)
        run(cmd, shell=True)

def query_yes_no(question, default="no"):
    """Ask a yes/no question via input() and return their answer.

    From: https://stackoverflow.com/questions/3041986/apt-command-line-interface-like-yes-no-input

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is True for "yes" or False for "no".
    """
    valid = {"yes": True, "y": True, "ye": True,
             "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")

#################################
##### Setup Functions
#################################
def linux_setup(): 

    print_section("Install packages")
    if query_yes_no("Install apt packages?"):
        pkg_list = ["fish", "git", "yadm", "curl", "emacs", "i3"]

        apt_get_pkgs(pkg_list)

    if "fish" not in os.environ["SHELL"] and query_yes_no("Set Fish as default shell?"):
        shell_setup()

    if query_yes_no("Install Kitty?"):
        install_kitty()

    if query_yes_no("Clone yadm dotfiles?"):
        yadm_clone()

def macos_setup():
    print_section("Install brew packages")
    brew_install_pkgs("git yadm emacs")
    install_kitty()

    print_section("Install Vim Plug")
    vim_plug_setup()

#################################
##### Main
#################################
if __name__ == "__main__":
    if sys.platform == "linux" or sys.platform == "linux2":
        # Assume all linux is debian, I know, it's bad
        linux_setup()
    elif platform == "darwin":
        macos_setup()
